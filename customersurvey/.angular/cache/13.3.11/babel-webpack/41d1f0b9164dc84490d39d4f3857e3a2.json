{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nexport let UserService = /*#__PURE__*/(() => {\n  class UserService {\n    constructor(router) {\n      this.router = router;\n      this.currentUserSubject = new BehaviorSubject(null);\n      this.currentUser = this.currentUserSubject.asObservable();\n      /*** Check currentUser from local storage ***/\n      let userData = null;\n      try {\n        userData = localStorage.getItem('userData') ? localStorage.getItem('userData') : null;\n        userData = userData ? JSON.parse(userData) : null;\n        this.currentUserSubject = new BehaviorSubject(userData.data);\n      } catch (error) {\n        if (error instanceof SyntaxError) {\n          this.removeUser();\n        }\n      }\n    }\n    /*** Get the current value of user ***/\n    get currentUserValue() {\n      return this.currentUserSubject.value;\n    }\n    /*** Get the current value of user ***/\n    get userRole() {\n      if (!this.currentUserValue || !this.currentUserValue.accessToken) {\n        return false;\n      }\n      const base64Url = this.currentUserValue.accessToken.split('.')[1];\n      const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n      const jsonPayload = decodeURIComponent(atob(base64).split('').map(c => {\n        return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n      }).join(''));\n      return JSON.parse(jsonPayload).role;\n    }\n    /*** Get the current user token ***/\n    get getUserToken() {\n      if (!!this.currentUserValue) {\n        return this.currentUserValue.accessToken;\n      }\n    }\n    getRoleGroup() {\n      var _a;\n      let userData = localStorage.getItem('userData') ? localStorage.getItem('userData') : null;\n      userData = userData ? JSON.parse(userData) : null;\n      return (_a = userData === null || userData === void 0 ? void 0 : userData.data) === null || _a === void 0 ? void 0 : _a.roleInfo;\n    }\n    /*** Set user in local storage ***/\n    /*  setUserLocalData(userData: any): void {\r\n       localStorage.setItem('userData', JSON.stringify(userData));\r\n       this.currentUserSubject.next(userData);\r\n     } */\n    setUserLocalData(data) {\n      const userData = {\n        data: data,\n        timestamp: new Date().getTime() + 60 * 2 * 1000\n      };\n      localStorage.setItem('userData', JSON.stringify(userData));\n      this.currentUserSubject.next(userData.data);\n    }\n    checkSession() {\n      const storedData = localStorage.getItem('userData');\n      console.log(\"storedData\", storedData);\n      if (storedData) {\n        const parsedData = JSON.parse(storedData);\n        const currentTime = new Date().getTime();\n        console.log(\"storedData\", currentTime, parsedData.timestamp, currentTime <= parsedData.timestamp);\n        if (currentTime <= parsedData.timestamp) {\n          console.log(parsedData.data);\n        } else {\n          localStorage.removeItem('userData');\n        }\n      } else {\n        console.log(\"No session\");\n        // No data found in localStorage\n      }\n    }\n    /*** Remove user from local storage ***/\n    removeUser() {\n      localStorage.removeItem('userData');\n      if (this.currentUserSubject) {\n        this.currentUserSubject.next(null);\n      }\n    }\n    /*** User Sign-Out ***/\n    userSignOut() {\n      this.removeUser();\n      //  this.router.navigate(['/login']);\n    }\n    /*** User Sign-Out ***/\n    adminSignOut() {\n      this.removeUser();\n      this.router.navigate(['/admin/login']);\n    }\n  }\n  UserService.ɵfac = function UserService_Factory(t) {\n    return new (t || UserService)(i0.ɵɵinject(i1.Router));\n  };\n  UserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserService,\n    factory: UserService.ɵfac,\n    providedIn: 'root'\n  });\n  return UserService;\n})();","map":null,"metadata":{},"sourceType":"module"}