{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormGroup, Validators } from '@angular/forms';\nimport { ApiUrl } from 'src/app/core/apiUrl';\nimport * as moment from 'moment';\nimport { CustomerDelivery } from 'src/app/shared/models/delivery.model';\nimport { Patterns } from 'src/app/shared/models/patterns.model';\nimport { forkJoin, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nlet DeliveryComponent = class DeliveryComponent {\n  constructor(formBuilder, router, route, message, http, UtilsService, datePipe) {\n    this.formBuilder = formBuilder;\n    this.router = router;\n    this.route = route;\n    this.message = message;\n    this.http = http;\n    this.UtilsService = UtilsService;\n    this.datePipe = datePipe;\n    this.deliverData = new CustomerDelivery();\n    this.deliveryForm = new FormGroup({});\n    this.porscheModels = [];\n    this.deliverTypes = [];\n    this.isSubmitted = false;\n    this.isLoading = false;\n    this.today = moment(new Date()).format('YYYY-MM-DD');\n    this.minTime = moment(new Date()).format('LT');\n    this.validationPattern = new Patterns();\n    this.consultants = [];\n    this.advisors = [];\n    this.porschePros = [];\n    this.isTouched = false;\n    this.isEmailTouched = false;\n    this.isContactTouched = false;\n    this.createDeliveryForm();\n  }\n  ngOnInit() {\n    this.deliveryId = this.route.snapshot.paramMap.get('deliveryId');\n    this.getPorshceModels();\n    this.getAllStaff();\n    const inputElement = document.getElementById('phoneNumberInput');\n    inputElement.addEventListener('keydown', event => {\n      // Allow key codes for digits and necessary control keys (e.g., backspace, delete, arrow keys)\n      const allowedKeyCodes = [8, 9, 37, 39, 46]; // Backspace, Tab, Left Arrow, Right Arrow, Delete\n      if (!allowedKeyCodes.includes(event.keyCode) && (event.key < '0' || event.key > '9')) {\n        event.preventDefault();\n      }\n    });\n  }\n  /*** Create Delivery Form ***/\n  createDeliveryForm() {\n    this.deliveryForm = this.formBuilder.group({\n      customerName: ['', Validators.required],\n      customerEmail: ['', [Validators.required, Validators.pattern(this.validationPattern.emailPattern)]],\n      model: ['', Validators.required],\n      deliveryDate: [this.today, Validators.required],\n      deliveryTime: ['', Validators.required],\n      contactNumber: ['', [Validators.required, Validators.pattern(this.validationPattern.telPattern)]],\n      porschePro: ['', Validators.required],\n      salesConsultant: ['', Validators.required],\n      serviceAdvisor: ['', Validators.required],\n      deliveryType: ['', Validators.required],\n      skipSurvey: [false]\n    });\n  }\n  errorNull(controlName) {\n    if (controlName == 'customerEmail') this.isEmailTouched = false;\n    if (controlName == 'contactNumber') this.isContactTouched = false;\n  }\n  validateControl(controlName) {\n    const control = this.deliveryForm.get(controlName);\n    control === null || control === void 0 ? void 0 : control.markAsTouched();\n    if (controlName == 'customerEmail') this.isEmailTouched = true;\n    if (controlName == 'contactNumber') this.isContactTouched = true;\n  }\n  onKeyUp(event) {\n    // Disable keyboard input\n    event.preventDefault();\n  }\n  /*** Get Delivery Details ***/\n  getDeliveryDetails() {\n    const url = ApiUrl.dealer.delivery + '/' + this.deliveryId;\n    this.http.getData(url).subscribe(response => {\n      this.isLoading = false;\n      if (!!response) {\n        const result = response.result ? response.result : {};\n        if (result) {\n          this.setFormData(result);\n        } else {\n          this.message.toast('error', response.message);\n          this.router.navigate(['']);\n        }\n      }\n    }, err => {\n      this.router.navigate(['']);\n    });\n  }\n  /*** Set Default Values ***/\n  setFormData(data) {\n    this.deliverData = data;\n    this.deliveryForm.controls.customerName.patchValue(data.customerName, {\n      onlySelf: true\n    });\n    this.deliveryForm.controls.customerEmail.patchValue(data.customerEmail, {\n      onlySelf: true\n    });\n    this.deliveryForm.controls.model.patchValue(data.model, {\n      onlySelf: true\n    });\n    this.deliveryForm.controls.deliveryDate.patchValue(data.deliveryDate, {\n      onlySelf: true\n    });\n    this.checkMinDate();\n    this.deliveryForm.controls.contactNumber.patchValue(data.contactNumber.includes('+1') ? +data.contactNumber.slice(2).replace(/\\D/g, '').toString() : data.contactNumber.replace(/\\D/g, '').toString(), {\n      onlySelf: true\n    });\n    this.deliveryForm.controls.porschePro.patchValue(data.porschePro.name, {\n      onlySelf: true\n    });\n    this.deliveryForm.controls.salesConsultant.patchValue(data.salesConsultant.name, {\n      onlySelf: true\n    });\n    this.deliveryForm.controls.serviceAdvisor.patchValue(data.serviceAdvisor.name, {\n      onlySelf: true\n    });\n    this.deliveryForm.controls.deliveryType.patchValue(data.deliveryType, {\n      onlySelf: true\n    });\n    this.deliveryForm.controls.skipSurvey.patchValue(data.skipSurvey, {\n      onlySelf: true\n    });\n    setTimeout(() => {\n      this.deliveryForm.controls.deliveryTime.patchValue(moment(data.deliveryTime).format('LT'), {\n        onlySelf: true\n      });\n    });\n    this.formatPhoneNumber();\n  }\n  formatPhoneNumber() {\n    const input = document.getElementById(\"phoneNumberInput\");\n    input.value = this.UtilsService.formatPhoneNumber(input.value);\n    this.deliveryForm.patchValue({\n      contactNumber: input.value\n    });\n    /*  if (this.deliveryForm.controls.contactNumber.valid)\r\n       input.value = input.value ? this.UtilsService.formatPhoneNumber(input.value) : ''; */\n  }\n\n  getAllStaff() {\n    const response1 = this.http.getData(ApiUrl.dealer.getConsultants).pipe(catchError(err => of({\n      isError: true,\n      error: err\n    })));\n    const response2 = this.http.getData(ApiUrl.dealer.getPorschePros).pipe(catchError(err => of({\n      isError: true,\n      error: err\n    })));\n    const response3 = this.http.getData(ApiUrl.dealer.getAdvisors).pipe(catchError(err => of({\n      isError: true,\n      error: err\n    })));\n    const response4 = this.http.getData(ApiUrl.dealer.getDeliveryTypes).pipe(catchError(err => of({\n      isError: true,\n      error: err\n    })));\n    forkJoin([response1, response2, response3, response4]).subscribe(responseList => {\n      const responseData1 = responseList[0];\n      const responseData2 = responseList[1];\n      const responseData3 = responseList[2];\n      const responseData4 = responseList[3];\n      if (!!responseData1) {\n        const result1 = responseData1.result ? responseData1.result : [];\n        this.consultants = result1;\n        if (!!responseData2) {\n          const result2 = responseData2.result ? responseData2.result : [];\n          this.porschePros = result2;\n        }\n        if (!!responseData3) {\n          const result3 = responseData3.result ? responseData3.result : [];\n          this.advisors = result3;\n        }\n        if (!!responseData4) {\n          const result4 = responseData4.result ? responseData4.result : [];\n          this.deliverTypes = result4;\n        }\n      }\n    }, error => {\n      console.log(error);\n    });\n  }\n  /*** Get Porshe  ***/\n  getPorshceModels() {\n    this.http.getData(ApiUrl.dealer.getCarModels).subscribe(response => {\n      if (!!response) {\n        this.porscheModels = response.result ? response.result : [];\n        if (this.deliveryId) {\n          this.getDeliveryDetails();\n        }\n      }\n    });\n  }\n  /*** Get Login Form Controls ***/\n  get dForm() {\n    return this.deliveryForm.controls;\n  }\n  /*** Trim form values ***/\n  trim(key) {\n    this.deliveryForm.controls[key].patchValue(this.dForm[key].value.trim());\n  }\n  /*** Check current Date ***/\n  checkMinDate() {\n    const today = moment(new Date());\n    if (this.deliveryForm.controls.deliveryDate.value) {\n      const deliveryDate = moment(this.deliveryForm.controls.deliveryDate.value);\n      this.minTime = '00:00 AM';\n      if (!deliveryDate.isSameOrAfter(today)) {\n        this.deliveryForm.controls.deliveryDate.patchValue(this.today);\n        this.deliveryForm.controls.deliveryTime.patchValue(today.format('LT'));\n        this.minTime = today.format('LT');\n      }\n    } else {\n      this.deliveryForm.controls.deliveryDate.patchValue(this.today);\n      this.deliveryForm.controls.deliveryTime.patchValue(today.format('LT'));\n      this.minTime = today.format('LT');\n    }\n  }\n  /*** Submit Form ***/\n  onSubmit() {\n    this.isSubmitted = true;\n    if (!this.deliveryForm.valid) {\n      setTimeout(() => {\n        this.isSubmitted = false;\n      }, 20000);\n      return;\n    }\n    const params = Object.assign({}, this.deliveryForm.value);\n    params.contactNumber = params.contactNumber.toString();\n    params.contactNumber = !params.contactNumber.includes('+1') ? '+1 ' + params.contactNumber : params.contactNumber;\n    params.deliveryDate = moment(params.deliveryDate).format('YYYY-MM-DD');\n    const utcDeliveryTime = moment(params.deliveryDate + ' ' + params.deliveryTime, 'YYYY-MM-DD HH:mm a').format();\n    params.deliveryTime = utcDeliveryTime.split('+')[0];\n    const proscheProExist = this.porschePros.filter(el => el.name === params.porschePro);\n    const consultantExist = this.consultants.filter(el => el.name === params.salesConsultant);\n    const advisorExist = this.advisors.filter(el => el.name === params.serviceAdvisor);\n    if (!proscheProExist.length || !consultantExist.length || !advisorExist.length) {\n      if (!proscheProExist.length) {\n        this.message.toast('error', 'Please select Porsche Pro from list');\n      }\n      if (!consultantExist.length) {\n        this.message.toast('error', 'Please select Sales Consultant from list');\n      }\n      if (!advisorExist.length) {\n        this.message.toast('error', 'Please select Service Advisor from list');\n      }\n      return;\n    }\n    params.porschePro = proscheProExist[0];\n    params.salesConsultant = consultantExist[0];\n    params.serviceAdvisor = advisorExist[0];\n    this.isLoading = true;\n    if (this.deliveryId) {\n      params.id = +this.deliveryId;\n      if (this.deliverData.customerId) {\n        params.customerId = +this.deliverData.customerId;\n      }\n      this.http.putData(ApiUrl.dealer.delivery, params).subscribe(response => {\n        this.isLoading = false;\n        if (!!response) {\n          this.message.toast('success', response.message);\n          this.isSubmitted = false;\n          this.router.navigate(['']);\n        }\n      }, err => {\n        this.isLoading = false;\n      });\n    } else {\n      this.http.postData(ApiUrl.dealer.delivery, params).subscribe(response => {\n        this.isLoading = false;\n        if (!!response) {\n          this.message.toast('success', response.message);\n          this.deliveryForm.reset();\n          this.isSubmitted = false;\n          this.router.navigate(['']);\n        }\n      }, err => {\n        this.isLoading = false;\n      });\n    }\n  }\n  updateSkipSurvey(evt) {\n    if (evt.checked) {\n      this.dForm.skipSurvey.patchValue(true);\n    } else {\n      this.dForm.skipSurvey.patchValue(false);\n    }\n  }\n};\nDeliveryComponent = __decorate([Component({\n  selector: 'app-delivery',\n  templateUrl: './delivery.component.html',\n  styleUrls: ['./delivery.component.scss']\n})], DeliveryComponent);\nexport { DeliveryComponent };","map":null,"metadata":{},"sourceType":"module"}