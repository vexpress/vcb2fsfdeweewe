{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport { environment } from './../../../environments/environment';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../loader/loader.service\";\nexport let HttpService = /*#__PURE__*/(() => {\n  class HttpService {\n    constructor(http, loader) {\n      this.http = http;\n      this.loader = loader;\n    }\n    /******************** HTTP Get Request ********************/\n    getData(url, params, ignoreLoader) {\n      if (!ignoreLoader) this.loader.show();\n      const paramsData = params ? {\n        params: this.appendParams(params)\n      } : {};\n      return this.http.get(environment.BASE_URL + url, paramsData).pipe(map(response => {\n        this.loader.hide();\n        if (response.statusCode === 200) {\n          return response;\n        }\n      }));\n    }\n    getAPi(url, params, ignoreLoader) {\n      if (!ignoreLoader) this.loader.show();\n      const paramsData = params ? {\n        params: this.appendParams(params)\n      } : {};\n      return this.http.get(environment.BASE_URL + url, paramsData).pipe(map(response => {\n        this.loader.hide();\n        if (response.statusCode === 200) {\n          return response;\n        }\n      }));\n    }\n    /******************** HTTP Post Request ********************/\n    postData(url, data) {\n      this.loader.show();\n      return this.http.post(environment.BASE_URL + url, data).pipe(map(response => {\n        this.loader.hide();\n        if (response.statusCode === 200) {\n          return response;\n        }\n      }));\n    }\n    /******************** HTTP Put Request ********************/\n    putData(url, data) {\n      this.loader.show();\n      return this.http.put(environment.BASE_URL + url, data).pipe(map(response => {\n        this.loader.hide();\n        if (response.statusCode === 200) {\n          return response;\n        }\n      }));\n    }\n    /******************** HTTP Delete Request ********************/\n    deleteData(url, id) {\n      this.loader.show();\n      return this.http.delete(environment.BASE_URL + url + '/' + id).pipe(map(response => {\n        this.loader.hide();\n        if (response.statusCode === 200) {\n          return response;\n        }\n      }));\n    }\n    deleteRecord(url) {\n      this.loader.show();\n      return this.http.delete(environment.BASE_URL + url).pipe(map(response => {\n        this.loader.hide();\n        if (response.statusCode === 200) {\n          return response;\n        }\n      }));\n    }\n    /******************** HTTP Formdata ********************/\n    appendFormData(myFormData) {\n      const fd = new FormData();\n      for (const key in myFormData) {\n        if (myFormData.hasOwnProperty(key)) {\n          fd.append(key, myFormData[key]);\n        }\n      }\n      return fd;\n    }\n    /******************** HTTP Params ********************/\n    appendParams(myParams) {\n      let params = new HttpParams();\n      for (const key in myParams) {\n        if (myParams.hasOwnProperty(key)) {\n          params = params.append(key, myParams[key]);\n        }\n      }\n      return params;\n    }\n  }\n  HttpService.ɵfac = function HttpService_Factory(t) {\n    return new (t || HttpService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.LoaderService));\n  };\n  HttpService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: HttpService,\n    factory: HttpService.ɵfac,\n    providedIn: 'root'\n  });\n  return HttpService;\n})();","map":null,"metadata":{},"sourceType":"module"}