{"ast":null,"code":"import { ApiUrl } from 'src/app/core/apiUrl';\nimport { Patterns } from 'src/app/shared/models/patterns.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"src/app/services/user/user.service\";\nimport * as i4 from \"src/app/services/message/message.service\";\nimport * as i5 from \"src/app/services/http/http.service\";\nimport * as i6 from \"@porsche-design-system/components-angular\";\nexport let PclAuthorizationComponent = /*#__PURE__*/(() => {\n  class PclAuthorizationComponent {\n    constructor(formBuilder, router, user, message, http) {\n      this.formBuilder = formBuilder;\n      this.router = router;\n      this.user = user;\n      this.message = message;\n      this.http = http;\n      this.isSubmitted = false;\n      this.isLoading = false;\n      this.isAdmin = false;\n      this.validationPattern = new Patterns();\n    }\n    ngOnInit() {\n      // this.user.userSignOut();\n      // this.clearAllCookies(); \n      this.http.getData('auth/getppnuserinfo').subscribe(response => {\n        console.log(response);\n        if (!!response) {\n          this.requestData = response.result ? response.result : {};\n          this.onSubmit();\n        }\n      }, error => {\n        console.error('Error fetching protected resource:', error);\n        // Handle error \n      });\n    }\n    /*** Intialize Login Form ***/\n    createLoginForm() {}\n    clearAllCookies() {\n      const cookies = document.cookie.split('; ');\n      console.log(\"cookies\", cookies);\n      for (const cookie of cookies) {\n        const [name, _] = cookie.split('=');\n        // Set the cookie to expire in the past to delete it\n        document.cookie = `${name}=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;`;\n      }\n    }\n    /*** Submit Login Form ***/\n    onSubmit() {\n      const submitData = {\n        email: this.requestData.email,\n        firstName: this.requestData.name,\n        lastName: this.requestData.given_name,\n        phone: this.requestData.phone ? this.requestData.phone : '',\n        centreName: this.requestData.centrename,\n        roleName: this.requestData.app_roles\n      };\n      this.isSubmitted = true;\n      const params = Object.assign({}, submitData);\n      this.isLoading = true;\n      const url = ApiUrl.auth.pclLogin;\n      this.http.postData(url, params).subscribe(response => {\n        console.log(\"response\", response, !!response);\n        this.isLoading = false;\n        if (!!response) {\n          this.user.setUserLocalData(response.result);\n          this.message.toast('success', response.message);\n          if (response.result.roleInfo.roleGroup === 'Admin') {\n            this.router.navigate(['admin/all-dealers']);\n          } else {\n            this.router.navigate(['/dealer']);\n          }\n        }\n      }, err => {\n        this.isLoading = false;\n      });\n    }\n    /*** Navigate to forgot password page ***/\n    forgotPassword() {\n      if (this.isAdmin) {\n        this.router.navigate(['admin/forgot-password']);\n      } else {\n        this.router.navigate(['/forgot-password']);\n      }\n    }\n  }\n  PclAuthorizationComponent.ɵfac = function PclAuthorizationComponent_Factory(t) {\n    return new (t || PclAuthorizationComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.UserService), i0.ɵɵdirectiveInject(i4.MessageService), i0.ɵɵdirectiveInject(i5.HttpService));\n  };\n  PclAuthorizationComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: PclAuthorizationComponent,\n    selectors: [[\"app-pcl-authorization\"]],\n    decls: 10,\n    vars: 2,\n    consts: [[1, \"login\"], [\"width\", \"extended\", 1, \"hydrated\", \"p-content-wrapper\", \"login-wrapper\"], [1, \"example-grid\"], [3, \"size\"], [1, \"black-bg\"], [1, \"img-box\"], [\"src\", \"assets/images/porsche-login.png\", \"alt\", \"prosche\"], [1, \"form-box\"], [\"src\", \"assets/images/Porsche_wordmark_black_rgb.svg\", \"alt\", \"logo\", \"width\", \"200\", 1, \"header_logo\"]],\n    template: function PclAuthorizationComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"section\", 0)(1, \"p-content-wrapper\", 1)(2, \"p-grid\", 2)(3, \"p-grid-item\", 3)(4, \"div\", 4)(5, \"div\", 5);\n        i0.ɵɵelement(6, \"img\", 6);\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(7, \"p-grid-item\", 3)(8, \"div\", 7);\n        i0.ɵɵelement(9, \"img\", 8);\n        i0.ɵɵelementEnd()()()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"size\", 6);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"size\", 6);\n      }\n    },\n    directives: [i6.PContentWrapper, i6.PGrid, i6.PGridItem],\n    styles: [\"\"]\n  });\n  return PclAuthorizationComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}