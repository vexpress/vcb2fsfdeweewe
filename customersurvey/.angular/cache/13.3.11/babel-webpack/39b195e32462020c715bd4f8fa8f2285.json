{"ast":null,"code":"import { FormGroup, Validators } from '@angular/forms';\nimport { ApiUrl } from 'src/app/core/apiUrl';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"src/app/services/message/message.service\";\nimport * as i4 from \"src/app/services/http/http.service\";\nexport let ResetPasswordComponent = /*#__PURE__*/(() => {\n  class ResetPasswordComponent {\n    constructor(route, router, formBuilder, message, http) {\n      this.route = route;\n      this.router = router;\n      this.formBuilder = formBuilder;\n      this.message = message;\n      this.http = http;\n      this.resetForm = new FormGroup({});\n      this.isSubmitted = false;\n      this.isLoading = false;\n      this.isAdmin = false;\n      this.setPassword = false;\n      this.route.queryParams.subscribe(params => {\n        this.token = params.token;\n      });\n      this.createResetForm();\n    }\n    ngOnInit() {\n      if (this.router.url.includes('/admin')) {\n        this.isAdmin = true;\n      }\n      if (this.router.url.includes('/set-password')) {\n        this.setPassword = true;\n      }\n    }\n    /*** Intialize Form ***/\n    createResetForm() {\n      const pattern1 = new RegExp(/^(?=.*\\d)(?=.*[A-Z]).{6,15}$/);\n      this.resetForm = this.formBuilder.group({\n        password: ['', [Validators.required, Validators.minLength(6), Validators.maxLength(15), Validators.pattern(pattern1)]],\n        confirmPassword: ['', Validators.required]\n      }, {\n        validator: this.checkPasswords\n      });\n    }\n    /*** Validation for password and Confirm password ***/\n    checkPasswords(group) {\n      const pass = group.controls.password.value;\n      const confirmPass = group.controls.confirmPassword.value;\n      if (pass && confirmPass) {\n        return pass === confirmPass ? null : {\n          notSame: true\n        };\n      }\n      return null;\n    }\n    /*** Submit Form ***/\n    onSubmit() {\n      this.isSubmitted = true;\n      if (!this.resetForm.valid) {\n        setTimeout(() => {\n          this.isSubmitted = false;\n        }, 20000);\n        return;\n      }\n      const params = {\n        password: this.resetForm.controls.password.value,\n        token: this.token\n      };\n      const url = this.isAdmin ? ApiUrl.admin.resetPassword : ApiUrl.auth.resetPassword;\n      this.isLoading = true;\n      this.http.postData(url, params).subscribe(response => {\n        this.isLoading = false;\n        if (!!response) {\n          this.message.toast('success', response.message);\n          if (this.isAdmin) {\n            this.router.navigate(['/admin/login']);\n          } else {\n            this.router.navigate(['/login']);\n          }\n        }\n      }, err => {\n        this.isLoading = false;\n      });\n    }\n    /*** Redirect to Login page ***/\n    backToLogin() {\n      if (this.isAdmin) {\n        this.router.navigate(['/admin/login']);\n      } else {\n        this.router.navigate(['/login']);\n      }\n    }\n  }\n  ResetPasswordComponent.ɵfac = function ResetPasswordComponent_Factory(t) {\n    return new (t || ResetPasswordComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i2.FormBuilder), i0.ɵɵdirectiveInject(i3.MessageService), i0.ɵɵdirectiveInject(i4.HttpService));\n  };\n  ResetPasswordComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ResetPasswordComponent,\n    selectors: [[\"app-reset-password\"]],\n    decls: 38,\n    vars: 39,\n    consts: [[1, \"delivery-dashboard\"], [\"width\", \"extended\", 1, \"hydrated\", \"p-content-wrapper\"], [3, \"size\"], [\"novalidate\", \"novalidate\", 1, \"forgot-form\", 3, \"formGroup\", \"ngSubmit\"], [1, \"last\"], [1, \"form-grid-item-container\", \"p-flex\", \"hydrated\"], [1, \"form-grid-item\", \"p-flex__item\", \"p-flex__item--width-full\", \"hydrated\", 3, \"width\"], [1, \"hydrated\", 3, \"message\", \"state\"], [\"slot\", \"label\"], [\"type\", \"password\", \"name\", \"password\", \"required\", \"required\", \"formControlName\", \"password\", 3, \"keyup\"], [1, \"form-row-spacing\", \"form-grid-item\", \"p-flex__item\", \"p-flex__item--width-full\", \"hydrated\", 3, \"width\"], [\"type\", \"password\", \"name\", \"email\", \"required\", \"required\", \"formControlName\", \"confirmPassword\", 3, \"keyup\"], [1, \"btn-box\"], [3, \"icon\", \"variant\", \"click\"], [\"type\", \"submit\", \"variant\", \"primary\", 3, \"loading\"]],\n    template: function ResetPasswordComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"app-header\");\n        i0.ɵɵelementStart(1, \"section\", 0)(2, \"p-content-wrapper\", 1)(3, \"p-grid\")(4, \"p-grid-item\", 2)(5, \"form\", 3);\n        i0.ɵɵlistener(\"ngSubmit\", function ResetPasswordComponent_Template_form_ngSubmit_5_listener() {\n          return ctx.onSubmit();\n        });\n        i0.ɵɵelementStart(6, \"h2\");\n        i0.ɵɵtext(7);\n        i0.ɵɵpipe(8, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"p\", 4);\n        i0.ɵɵtext(10);\n        i0.ɵɵpipe(11, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"p-flex\", 5)(13, \"p-flex-item\", 6)(14, \"p-text-field-wrapper\", 7);\n        i0.ɵɵpipe(15, \"translate\");\n        i0.ɵɵpipe(16, \"translate\");\n        i0.ɵɵpipe(17, \"translate\");\n        i0.ɵɵelementStart(18, \"span\", 8);\n        i0.ɵɵtext(19);\n        i0.ɵɵpipe(20, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(21, \"input\", 9);\n        i0.ɵɵlistener(\"keyup\", function ResetPasswordComponent_Template_input_keyup_21_listener($event) {\n          return $event.keyCode === 13 && ctx.onSubmit();\n        });\n        i0.ɵɵelementEnd()()()();\n        i0.ɵɵelementStart(22, \"p-flex\", 5)(23, \"p-flex-item\", 10)(24, \"p-text-field-wrapper\", 7);\n        i0.ɵɵpipe(25, \"translate\");\n        i0.ɵɵpipe(26, \"translate\");\n        i0.ɵɵelementStart(27, \"span\", 8);\n        i0.ɵɵtext(28);\n        i0.ɵɵpipe(29, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(30, \"input\", 11);\n        i0.ɵɵlistener(\"keyup\", function ResetPasswordComponent_Template_input_keyup_30_listener($event) {\n          return $event.keyCode === 13 && ctx.onSubmit();\n        });\n        i0.ɵɵelementEnd()()()();\n        i0.ɵɵelementStart(31, \"div\", 12)(32, \"p-button\", 13);\n        i0.ɵɵlistener(\"click\", function ResetPasswordComponent_Template_p_button_click_32_listener() {\n          return ctx.backToLogin();\n        });\n        i0.ɵɵtext(33);\n        i0.ɵɵpipe(34, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(35, \"p-button\", 14);\n        i0.ɵɵtext(36);\n        i0.ɵɵpipe(37, \"translate\");\n        i0.ɵɵelementEnd()()()()()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"size\", 12);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"formGroup\", ctx.resetForm);\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(8, 17, ctx.setPassword ? \"Set Password\" : \"Reset Password\"));\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate1(\"\", i0.ɵɵpipeBind1(11, 19, \"Please enter your new password below.\"), \" \");\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"width\", \"full\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"message\", ctx.isSubmitted && ((ctx.resetForm.controls.password.errors == null ? null : ctx.resetForm.controls.password.errors.minlength) || (ctx.resetForm.controls.password.errors == null ? null : ctx.resetForm.controls.password.errors.maxlength)) ? i0.ɵɵpipeBind1(15, 21, \"Password length should be 8-15 digits.\") : ctx.isSubmitted && (ctx.resetForm.controls.password.errors == null ? null : ctx.resetForm.controls.password.errors.pattern) ? i0.ɵɵpipeBind1(16, 23, \"Password must have 1 Uppercase and 1 numeric character.\") : i0.ɵɵpipeBind1(17, 25, \"Please enter your new password.\"))(\"state\", ctx.isSubmitted && ctx.resetForm.controls.password.errors ? \"error\" : \"none\");\n        i0.ɵɵadvance(5);\n        i0.ɵɵtextInterpolate1(\"\", i0.ɵɵpipeBind1(20, 27, \"New Password\"), \" \");\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"width\", \"full\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"message\", ctx.isSubmitted && ctx.resetForm.hasError(\"notSame\") ? i0.ɵɵpipeBind1(25, 29, \"Password not matched.\") : i0.ɵɵpipeBind1(26, 31, \"Please confim your password.\"))(\"state\", ctx.isSubmitted && (ctx.resetForm.controls.confirmPassword.errors || ctx.resetForm.hasError(\"notSame\")) ? \"error\" : \"none\");\n        i0.ɵɵadvance(4);\n        i0.ɵɵtextInterpolate1(\"\", i0.ɵɵpipeBind1(29, 33, \"Confirm Password\"), \" \");\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"icon\", \"close\")(\"variant\", \"tertiary\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate1(\"\", i0.ɵɵpipeBind1(34, 35, \"Cancel\"), \" \");\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"loading\", ctx.isLoading);\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate1(\"\", i0.ɵɵpipeBind1(37, 37, \"Save New Password\"), \" \");\n      }\n    },\n    styles: [\".forgot-form[_ngcontent-%COMP%]{width:100%;max-width:633px;margin:60px auto}.forgot-form[_ngcontent-%COMP%]   h2[_ngcontent-%COMP%]{margin-bottom:0}.forgot-form[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]{width:100%;margin:0}.forgot-form[_ngcontent-%COMP%]   p.last[_ngcontent-%COMP%]{margin-bottom:40px}.forgot-form[_ngcontent-%COMP%]   .btn-box[_ngcontent-%COMP%]{width:100%;display:flex;margin:40px 0}.forgot-form[_ngcontent-%COMP%]   .btn-box[_ngcontent-%COMP%]   p-button[_ngcontent-%COMP%]:first-child{margin-right:16px}.forgot-form[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]{margin-bottom:40px}\"]\n  });\n  return ResetPasswordComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}