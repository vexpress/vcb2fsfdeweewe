{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, HostListener } from '@angular/core';\nimport { ApiUrl } from 'src/app/core/apiUrl';\nimport swal from 'sweetalert2';\nimport { debounceTime, distinctUntilChanged } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\nimport * as XLSX from 'xlsx';\nimport { appConfig } from 'src/app/core/app-conf';\nlet AuditLogsComponent = class AuditLogsComponent {\n  constructor(router, http, message, toastr, datePipe, loader) {\n    this.router = router;\n    this.http = http;\n    this.message = message;\n    this.toastr = toastr;\n    this.datePipe = datePipe;\n    this.loader = loader;\n    this.appConfig = appConfig;\n    this.status = false;\n    this.isLoading = false;\n    this.displayedColumns = ['id', 'eventName', 'activityDate', 'activityTime', 'performedBy', 'centreName', 'moduleName'];\n    this.dataSource = [];\n    this.searchDealer = '';\n    this.isFullListDisplayed = false;\n    this.pageNumber = 1;\n    this.pageSize = 20;\n    this.searchterm = new Subject();\n    this.loadCompleted = false;\n    this.tableLoad = true;\n    this.fromDelete = false;\n    this.loadingText = false;\n    this.searchterm.pipe(\n    // Time in milliseconds between key events\n    debounceTime(500)\n    // If previous query is diffent from current\n    , distinctUntilChanged()\n    // subscription for response\n    ).subscribe(term => {\n      this.dataSource = [];\n      this.pageNumber = 1;\n      this.pageSize = 20;\n      this.isFullListDisplayed = false;\n      this.getAllCenters();\n    });\n  }\n  onKeydownHandler(event) {\n    swal.close();\n  }\n  ngOnInit() {\n    this.getAllCenters();\n  }\n  dateConvert(inputDate) {\n    return this.datePipe.transform(inputDate, 'dd-MMM-yy');\n  }\n  /*** Get Centers Listing ***/\n  getAllCenters() {\n    this.isLoading = true;\n    const params = {\n      PageNumber: this.pageNumber,\n      PageSize: this.pageSize,\n      Search: this.searchDealer\n    };\n    this.http.getData(ApiUrl.admin.audit, params, true).subscribe(response => {\n      if (!!response) {\n        const result = response.result ? response.result : [];\n        console.log(\"result\", result);\n        if (result.length < this.pageSize) this.loadCompleted = true;\n        result.forEach(ele => {\n          ele.actions = '';\n        });\n        console.log(\"result\", this.dataSource);\n        this.dataSource = [...this.dataSource, ...result];\n        this.isLoading = false;\n        console.log(\"result after\", this.dataSource, this.isLoading);\n        if (this.dataSource.length === 0) this.toastr.error(\"No results matching the search criteria!\");\n        //  this.dataTableReload();\n      }\n    });\n  }\n\n  dataTableReload() {\n    this.tableLoad = false;\n    setTimeout(() => {\n      this.tableLoad = true;\n    }, 100);\n  }\n  /*** On Search ***/\n  clickEvent() {\n    this.loadCompleted = false;\n    this.status = !this.status;\n    this.searchDealer = this.status ? this.searchDealer : '';\n    if (!this.searchDealer) {\n      this.applyFilter();\n    }\n  }\n  /*** On Search ***/\n  applyFilter() {\n    this.searchterm.next(this.searchDealer);\n  }\n  /*** On Scroll load data ***/\n  onScroll() {\n    console.log(\"fff\", this.pageNumber * this.pageSize <= this.dataSource.length && !this.loadCompleted, this.pageNumber * this.pageSize, this.dataSource.length, this.loadCompleted, this.isLoading);\n    if (!this.isLoading) {\n      if (this.pageNumber * this.pageSize <= this.dataSource.length && !this.loadCompleted) {\n        this.pageNumber++;\n        this.getAllCenters();\n      } else {\n        this.isFullListDisplayed = true;\n      }\n    }\n  }\n  exportDataToExcel() {\n    this.exportToExcel(this.dataSource, 'user_data');\n  }\n  exportDataFromUrlToExcel() {\n    this.http.getData(ApiUrl.admin.auditAll).subscribe(response => {\n      if (!!response) {\n        const result = response.result ? response.result : [];\n        const formattedDate = this.datePipe.transform(new Date(), 'ddMMMyy');\n        this.exportToExcel(result, 'PCL Log' + formattedDate);\n        if (result.length === 0) this.toastr.error(\"No results found\");\n        //  this.dataTableReload();\n      }\n    });\n  }\n\n  exportToExcel(data, filename) {\n    console.log(\"data\", data);\n    const header = [{\n      name: 'ID',\n      key: 'id',\n      width: 10\n    }, {\n      name: 'Event Name',\n      key: 'eventName',\n      width: 40\n    }, {\n      name: 'Activity Date',\n      key: 'activityDate',\n      width: 20,\n      dataType: 'Date'\n    }, {\n      name: 'Activity Time',\n      key: 'activityTime',\n      width: 20\n    }, {\n      name: 'Performed By',\n      key: 'performedBy',\n      width: 20\n    }, {\n      name: 'Centre Name',\n      key: 'centreName',\n      width: 20\n    }, {\n      name: 'Module Name',\n      key: 'moduleName',\n      width: 20\n    }];\n    const headerNames = header.map(column => column.name);\n    const headerKeys = header.map(column => column.key);\n    const formattedData = data.map(item => {\n      const formattedItem = {};\n      headerKeys.forEach((key, index) => {\n        if (header[index].dataType === 'Date') {\n          formattedItem[headerNames[index]] = this.datePipe.transform(item[key], 'dd-MMM-yy');\n        } else {\n          formattedItem[headerNames[index]] = item[key];\n        }\n      });\n      return formattedItem;\n    });\n    console.log(\"formattedData\", formattedData);\n    const ws = XLSX.utils.json_to_sheet(formattedData, {\n      skipHeader: false\n    });\n    headerNames.forEach((headerName, index) => {\n      const cellAddress = XLSX.utils.encode_cell({\n        r: 0,\n        c: index\n      });\n      ws[cellAddress] = {\n        v: headerName,\n        t: 's'\n      };\n      if (header[index].width) {\n        if (!ws['!cols']) {\n          ws['!cols'] = [];\n        }\n        ws['!cols'][index] = {\n          width: header[index].width\n        };\n      }\n    });\n    const wb = XLSX.utils.book_new();\n    XLSX.utils.book_append_sheet(wb, ws, 'Sheet1');\n    XLSX.writeFile(wb, filename + '.xlsx');\n  }\n  formatDateOrTime(value) {\n    if (value instanceof Date) {\n      return this.datePipe.transform(value, 'dd-MMM-yy');\n    }\n    return value;\n  }\n  /*  generatePdfFromUrl() {\r\n    const params = {\r\n      PageNumber: 0,\r\n      PageSize: 100000000,\r\n      Search: this.searchDealer\r\n    };\r\n    this.http.getData(ApiUrl.admin.audit, params).subscribe((response: any) => {\r\n      if (!!response) {\r\n        const result = response.result ? response.result : [];\r\n        this.generatePdf(result, 'exported_data');\r\n        if (result.length === 0)\r\n          this.toastr.error(\"No results found\");\r\n        //  this.dataTableReload();\r\n      }\r\n        });\r\n  }\r\n      generatePdf(data: any[],filename: string): void {\r\n    const header = [\r\n      { name: 'ID', key: 'id', width: 10 },\r\n      { name: 'Event Name', key: 'eventName', width: 40 },\r\n      { name: 'Activity Date', key: 'activityDate', width: 20, dataType: 'Date' },\r\n      { name: 'Activity Time', key: 'activityTime', width: 20 },\r\n      { name: 'Performed By', key: 'performedBy', width: 20 },\r\n      { name: 'Centre Name', key: 'centreName', width: 20 },\r\n      { name: 'Module Name', key: 'moduleName', width: 20 }\r\n    ];\r\n    const doc = new jsPDF();\r\n    const headerNames = header.map(column => column.name);\r\n    const headerKeys = header.map(column => column.key);\r\n        const formattedData = data.map(item =>\r\n      headerKeys.map(key => (item[key] instanceof Date ? this.formatDate(item[key]) : item[key]))\r\n    );\r\n        doc.autoTable({\r\n      head: [headerNames],\r\n      body: formattedData,\r\n    });\r\n        doc.save(filename + '.pdf');\r\n  }   */\n  formatDate(date) {\n    // Implement your date formatting logic here\n    return '';\n  }\n};\n__decorate([HostListener('document:keydown.escape', ['$event'])], AuditLogsComponent.prototype, \"onKeydownHandler\", null);\nAuditLogsComponent = __decorate([Component({\n  selector: 'app-audit-logs',\n  templateUrl: './audit-logs.component.html',\n  styleUrls: ['./audit-logs.component.scss']\n})], AuditLogsComponent);\nexport { AuditLogsComponent };","map":null,"metadata":{},"sourceType":"module"}