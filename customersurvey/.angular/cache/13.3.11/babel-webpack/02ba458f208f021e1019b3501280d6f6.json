{"ast":null,"code":"import { HttpResponse } from '@angular/common/http';\nimport { tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/user/user.service\";\nimport * as i2 from \"src/app/services/message/message.service\";\nimport * as i3 from \"src/app/services/loader/loader.service\";\nexport let ErrorInterceptor = /*#__PURE__*/(() => {\n  class ErrorInterceptor {\n    constructor(user, message, loader) {\n      this.user = user;\n      this.message = message;\n      this.loader = loader;\n    }\n    intercept(request, next) {\n      return next.handle(request).pipe(tap(event => {\n        if (event instanceof HttpResponse) {\n          switch (event.body.status) {\n            case 401:\n              /*** Auto logout if 401 response returned from api ***/\n              this.loader.hide();\n              this.message.toast('error', event.body.message);\n              this.user.userSignOut();\n              break;\n            case 0:\n              /*** If server dosent respond ***/\n              this.loader.hide();\n              this.message.toast('error', 'HTTP Error Response.');\n              break;\n            case 400:\n            case 500:\n            case 8:\n            case 404:\n              /*** Check for other serve-side errors ***/\n              this.loader.hide();\n              this.message.toast('error', event.body.message);\n              break;\n          }\n        }\n      }, error => {\n        this.loader.hide();\n        switch (error.status) {\n          case 401:\n            /*** Auto logout if 401 response returned from api ***/\n            this.loader.hide();\n            this.message.toast('error', error.error.message);\n            this.user.userSignOut();\n            break;\n          case 503:\n            /*** service unavailable ***/\n            this.loader.hide();\n            this.message.toast('error', 'Service Unavailable, Server Error.');\n            break;\n          case 0:\n            /*** If server dosent respond ***/\n            this.loader.hide();\n            this.message.toast('error', 'HTTP Error Response.');\n            break;\n          default:\n            /*** Check for other serve-side errors ***/\n            if (!!error.error) {\n              this.loader.hide();\n              this.message.toast('error', error.error.message);\n            }\n            break;\n        }\n      }));\n    }\n  }\n  ErrorInterceptor.ɵfac = function ErrorInterceptor_Factory(t) {\n    return new (t || ErrorInterceptor)(i0.ɵɵinject(i1.UserService), i0.ɵɵinject(i2.MessageService), i0.ɵɵinject(i3.LoaderService));\n  };\n  ErrorInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ErrorInterceptor,\n    factory: ErrorInterceptor.ɵfac\n  });\n  return ErrorInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module"}